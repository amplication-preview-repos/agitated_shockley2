/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { Rewards } from "./Rewards";
import { RewardsCountArgs } from "./RewardsCountArgs";
import { RewardsFindManyArgs } from "./RewardsFindManyArgs";
import { RewardsFindUniqueArgs } from "./RewardsFindUniqueArgs";
import { DeleteRewardsArgs } from "./DeleteRewardsArgs";
import { RewardsService } from "../rewards.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Rewards)
export class RewardsResolverBase {
  constructor(
    protected readonly service: RewardsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Rewards",
    action: "read",
    possession: "any",
  })
  async _rewardsItemsMeta(
    @graphql.Args() args: RewardsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Rewards])
  @nestAccessControl.UseRoles({
    resource: "Rewards",
    action: "read",
    possession: "any",
  })
  async rewardsItems(
    @graphql.Args() args: RewardsFindManyArgs
  ): Promise<Rewards[]> {
    return this.service.rewardsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Rewards, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Rewards",
    action: "read",
    possession: "own",
  })
  async rewards(
    @graphql.Args() args: RewardsFindUniqueArgs
  ): Promise<Rewards | null> {
    const result = await this.service.rewards(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Rewards)
  @nestAccessControl.UseRoles({
    resource: "Rewards",
    action: "delete",
    possession: "any",
  })
  async deleteRewards(
    @graphql.Args() args: DeleteRewardsArgs
  ): Promise<Rewards | null> {
    try {
      return await this.service.deleteRewards(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
